package e3;

import java.util.*;

public abstract class Artist implements Comparable<Artist> {

    private String nombre;
    private String id;
    private int edad;
    private int anho_inicio;
    private ArrayList<String> generos;
    private ArrayList<Double> puntuaciones;

    public Artist(String nombre, int edad, String id, int anho_inicio){
        this.nombre = nombre;
        this.edad = edad;
        this.id = id;
        this.anho_inicio = anho_inicio;
        this.generos = new ArrayList<String>();
        this.puntuaciones = new ArrayList<Double>();

    }

    public Artist(String nombre, int edad, String id, int anho_inicio, ArrayList<String> generos, ArrayList<Double> puntuaciones){
        this.nombre = nombre;
        this.edad = edad;
        this.id = id;
        this.anho_inicio = anho_inicio;
        this.generos = generos;
        this.puntuaciones = puntuaciones;
    }
    public String getNombre() {
        return nombre;
    }

    public int getEdad(){ return edad; }

    public String getId(){ return id;}

    public int getAnho_inicio() {
        return anho_inicio;
    }

    public ArrayList<String> getGeneros() {
        return generos;
    }

    public ArrayList<Double> getPuntuaciones() {
        return puntuaciones;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public void setEdad(int edad){
        this.edad = edad;
    }

    public void setId(String id){this.id = id; }

    public void setAnho_inicio(int anho_inicio) {
        this.anho_inicio = anho_inicio;
    }

    public void setPuntuaciones(ArrayList<Double> puntuaciones) {
        this.puntuaciones = puntuaciones;
    }

    public void setGeneros(ArrayList<String> generos) {
        this.generos = generos;
    }

    public double mediaPuntuaciones(){
        double acumulador = 0;
        int i;
        for (i = 0; i < puntuaciones.size(); i++){
            acumulador =  acumulador + puntuaciones.get(i); //Como es un array list para obtener el valor de la posicion .get(i)
        }
        return acumulador/puntuaciones.size();
    }

    @Override
    public int compareTo(Artist o) { //Método que se encarga de comparar artistas entre si
       return this.id.compareTo(o.getId());
    }

    public static Comparator <Artist> comparadorPorMedia(){
        return new Comparator<Artist>() {
            @Override
            public int compare(Artist o1, Artist o2) {

                    double aux = o2.mediaPuntuaciones() - o1.mediaPuntuaciones();
                    if(aux < 0) return -1;
                    else if (aux > 0) { return 1;
                    } else return o1.getId().compareTo(o2.getId());
            }
        };
    }
    public static Comparator <Artist> comparadorPorEclecticismo() {
        return new Comparator<Artist>() {
            @Override
            public int compare(Artist o1, Artist o2) {
                if (o1.generos.size() != o2.generos.size()) {
                    return Integer.compare(o2.generos.size(), o1.generos.size());
                } else return o1.getId().compareTo(o2.getId());

            }
        };
    }

    public static Comparator <Artist> comparadorPorNombre() { //Clase anónima
        return new Comparator<Artist>() {
            @Override
            public int compare(Artist o1, Artist o2) {
                if (!o1.getNombre().equals(o2.getNombre())) {
                    return o1.nombre.compareTo(o2.nombre);
                } else return o1.getId().compareTo(o2.getId());
            }
        };
    }

    public static Comparator <Artist> comparadorPorEdad(){
        return new Comparator<Artist>() {
            @Override
            public int compare(Artist o1, Artist o2) {
                if (o1.getEdad() != o2.getEdad()) {
                    return Integer.compare(o1.edad, o2.edad);
                } else return o1.getId().compareTo(o2.getId());
            }
        };
    }

    @Override
    public String toString(){
        return "id " + id + "\nnombre " + nombre + "\nedad " + edad + "\nanho_inicio " + anho_inicio;
    }

    public abstract boolean isBand();
}
